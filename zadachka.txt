import tkinter


# обработка вычислений и передача их интерфейсу
class Builder:
    def __init__(self):
        # список points хранит точки многоугольника
        self.points = []
        # те же точки только для рисования
        self.points_for_drawing = []
        # список особых точек
        self.special_points = []
        # список команд для отрисовки
        self.commands = []

    # метод читающий точки с файла
    def accept_points(self):
        # открываем файл c данными data.txt в режиме чтения
        # в файле в одной строке содержаться точки в форме (x,y) -
        with open("data.txt", "r") as file:
            current_data = file.readline()
        # сохраняем точки в памяти
        self.points = list(map(processing_data, current_data.split(';')))
        self.points_for_drawing = self.points.copy()

    # находим центральные точки треугольника
    def find_central_dot(self):
        # рассматриваем первые точки многоугольника
        # т.к как он выпуклый берём первые три точки
        first_point = self.points[0]
        second_point = self.points[1]
        third_point = self.points[2]
        # найдём где проходит медиана из второй точки
        medium_point = [(first_point[0] + third_point[0]) / 2, (first_point[1] + third_point[1]) / 2]
        # одна из искомых точек - разбивает медиану треугольника в отношении 2 к 1 начиная от вершины
        special_point = [(second_point[0] + 2 * medium_point[0]) / 3, (second_point[1] + 2 * medium_point[1]) / 3]
        # сохраняем её в списке
        self.special_points.append(special_point)
        # если точек больше трёх строим линию, по которой отрезаем очередной кусок
        if len(self.points) > 3:
            self.commands.append(['build_line', first_point, third_point])
            del self.points[1]
        elif len(self.points) == 3:
            self.points = []
        self.commands.append(['build_point', special_point])

    # поиск финальной средней точки
    def find_final_point(self):
        # вычисляем среднее значение
        x = sum(map(lambda var: var[0], self.special_points)) / len(self.special_points)
        y = sum(map(lambda var: var[1], self.special_points)) / len(self.special_points)
        final_point = [x, y]
        self.commands.append(['build_final_point', final_point])

    # главный метод
    def start(self):
        # который последовательно реализует каждый из методов
        self.accept_points()
        while len(self.points) >= 3:
            self.find_central_dot()
        self.find_final_point()
        # возвращаем результат обработки
        return self.points_for_drawing, self.commands


# класс интерфейса
# по полученным данным рисуем интерфейс
class UserInterface(tkinter.Tk):
    def __init__(self, figure, commands):
        super().__init__()
        self.figure = [[i[0] * 50, i[1] * 50] for i in figure]
        self.commands = commands
        self.title("Проект поиска средней точки многоугольника")
        self.canvas = tkinter.Canvas(self, bg="black", width=500, height=500)
        self.canvas.create_polygon(*self.figure, fill='yellow')
        self.canvas.pack()
        widget = tkinter.Button(None, text='Mouse Clicks')
        widget.pack()
        widget.bind('<Button-1>', self.click)

    def click(self, event):
        if len(self.commands) == 0:
            return
        if self.commands[0][0] == "build_point":
            point = self.commands[0][1]
            point = [point[0] * 50, point[1] * 50]
            self.canvas.create_oval(point[0] - 5, point[1] - 5, point[0] + 5, point[1] + 5, outline="red", fill="red")
            self.canvas.pack()

        elif self.commands[0][0] == "build_line":
            first_point = self.commands[0][1]
            second_point = self.commands[0][2]
            first_point = [first_point[0] * 50, first_point[1] * 50]
            second_point = [second_point[0] * 50, second_point[1] * 50]
            self.canvas.create_line(first_point[0], first_point[1], second_point[0], second_point[1])
            self.canvas.pack()

        elif self.commands[0][0] == "build_final_point":
            point = self.commands[0][1]
            point = [point[0] * 50, point[1] * 50]
            self.canvas.create_oval(point[0] - 5, point[1] - 5, point[0] + 5, point[1] + 5, outline="blue", fill="blue")
            self.canvas.pack()
        del self.commands[0]


# функция обрабатывающая строки после разделения главной строки на строки с точками
def processing_data(string):
    return list(map(int, string[1:-1].split(", ")))


if __name__ == "__main__":
    # инициализируем класс вычислений
    builder = Builder()
    data = builder.start()
    # вычисляем всё и сохраняем в переменную данных
    # передаём данные графическому интерфейсу
    application = UserInterface(data[0], data[1])
    # запускаем интерфейс
    application.mainloop()
